package com.hzpd.modle.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hzpd.modle.db.NewsChannelBeanDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_CHANNEL_BEAN_DB".
*/
public class NewsChannelBeanDBDao extends AbstractDao<NewsChannelBeanDB, Long> {

    public static final String TABLENAME = "NEWS_CHANNEL_BEAN_DB";

    /**
     * Properties of entity NewsChannelBeanDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Tid = new Property(1, String.class, "tid", false, "TID");
        public final static Property Cnname = new Property(2, String.class, "cnname", false, "CNNAME");
        public final static Property Sort_order = new Property(3, String.class, "sort_order", false, "SORT_ORDER");
        public final static Property Fid = new Property(4, String.class, "fid", false, "FID");
        public final static Property Path = new Property(5, String.class, "path", false, "PATH");
        public final static Property Source = new Property(6, String.class, "source", false, "SOURCE");
        public final static Property Style = new Property(7, String.class, "style", false, "STYLE");
        public final static Property Status = new Property(8, String.class, "status", false, "STATUS");
        public final static Property Siteid = new Property(9, String.class, "siteid", false, "SITEID");
        public final static Property Default_show = new Property(10, String.class, "default_show", false, "DEFAULT_SHOW");
        public final static Property Icon = new Property(11, String.class, "icon", false, "ICON");
        public final static Property Tagid = new Property(12, String.class, "tagid", false, "TAGID");
        public final static Property Name = new Property(13, String.class, "name", false, "NAME");
        public final static Property Num = new Property(14, String.class, "num", false, "NUM");
        public final static Property Type = new Property(15, Integer.class, "type", false, "TYPE");
    };


    public NewsChannelBeanDBDao(DaoConfig config) {
        super(config);
    }
    
    public NewsChannelBeanDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_CHANNEL_BEAN_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TID\" TEXT," + // 1: tid
                "\"CNNAME\" TEXT," + // 2: cnname
                "\"SORT_ORDER\" TEXT," + // 3: sort_order
                "\"FID\" TEXT," + // 4: fid
                "\"PATH\" TEXT," + // 5: path
                "\"SOURCE\" TEXT," + // 6: source
                "\"STYLE\" TEXT," + // 7: style
                "\"STATUS\" TEXT," + // 8: status
                "\"SITEID\" TEXT," + // 9: siteid
                "\"DEFAULT_SHOW\" TEXT," + // 10: default_show
                "\"ICON\" TEXT," + // 11: icon
                "\"TAGID\" TEXT," + // 12: tagid
                "\"NAME\" TEXT," + // 13: name
                "\"NUM\" TEXT," + // 14: num
                "\"TYPE\" INTEGER);"); // 15: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_CHANNEL_BEAN_DB\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NewsChannelBeanDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tid = entity.getTid();
        if (tid != null) {
            stmt.bindString(2, tid);
        }
 
        String cnname = entity.getCnname();
        if (cnname != null) {
            stmt.bindString(3, cnname);
        }
 
        String sort_order = entity.getSort_order();
        if (sort_order != null) {
            stmt.bindString(4, sort_order);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(5, fid);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(7, source);
        }
 
        String style = entity.getStyle();
        if (style != null) {
            stmt.bindString(8, style);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(9, status);
        }
 
        String siteid = entity.getSiteid();
        if (siteid != null) {
            stmt.bindString(10, siteid);
        }
 
        String default_show = entity.getDefault_show();
        if (default_show != null) {
            stmt.bindString(11, default_show);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(12, icon);
        }
 
        String tagid = entity.getTagid();
        if (tagid != null) {
            stmt.bindString(13, tagid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(14, name);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(15, num);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(16, type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NewsChannelBeanDB readEntity(Cursor cursor, int offset) {
        NewsChannelBeanDB entity = new NewsChannelBeanDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cnname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sort_order
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // path
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // source
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // style
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // status
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // siteid
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // default_show
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // icon
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // tagid
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // name
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // num
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NewsChannelBeanDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCnname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSort_order(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSource(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStyle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStatus(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSiteid(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDefault_show(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIcon(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTagid(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setNum(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setType(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(NewsChannelBeanDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(NewsChannelBeanDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
