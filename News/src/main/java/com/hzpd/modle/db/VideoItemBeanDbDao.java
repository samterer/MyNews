package com.hzpd.modle.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hzpd.modle.db.VideoItemBeanDb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_ITEM_BEAN_DB".
*/
public class VideoItemBeanDbDao extends AbstractDao<VideoItemBeanDb, Long> {

    public static final String TABLENAME = "VIDEO_ITEM_BEAN_DB";

    /**
     * Properties of entity VideoItemBeanDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Vid = new Property(1, String.class, "vid", false, "VID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Time = new Property(3, String.class, "time", false, "TIME");
        public final static Property Mainpic = new Property(4, String.class, "mainpic", false, "MAINPIC");
        public final static Property Json_url = new Property(5, String.class, "json_url", false, "JSON_URL");
    };


    public VideoItemBeanDbDao(DaoConfig config) {
        super(config);
    }
    
    public VideoItemBeanDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_ITEM_BEAN_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"VID\" TEXT," + // 1: vid
                "\"TITLE\" TEXT," + // 2: title
                "\"TIME\" TEXT," + // 3: time
                "\"MAINPIC\" TEXT," + // 4: mainpic
                "\"JSON_URL\" TEXT);"); // 5: json_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_ITEM_BEAN_DB\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, VideoItemBeanDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String vid = entity.getVid();
        if (vid != null) {
            stmt.bindString(2, vid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String mainpic = entity.getMainpic();
        if (mainpic != null) {
            stmt.bindString(5, mainpic);
        }
 
        String json_url = entity.getJson_url();
        if (json_url != null) {
            stmt.bindString(6, json_url);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public VideoItemBeanDb readEntity(Cursor cursor, int offset) {
        VideoItemBeanDb entity = new VideoItemBeanDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // vid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mainpic
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // json_url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, VideoItemBeanDb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMainpic(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setJson_url(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(VideoItemBeanDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(VideoItemBeanDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
