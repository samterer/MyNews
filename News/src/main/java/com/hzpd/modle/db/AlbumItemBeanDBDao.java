package com.hzpd.modle.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hzpd.modle.db.AlbumItemBeanDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALBUM_ITEM_BEAN_DB".
*/
public class AlbumItemBeanDBDao extends AbstractDao<AlbumItemBeanDB, Long> {

    public static final String TABLENAME = "ALBUM_ITEM_BEAN_DB";

    /**
     * Properties of entity AlbumItemBeanDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pid = new Property(1, String.class, "pid", false, "PID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Count = new Property(3, String.class, "count", false, "COUNT");
        public final static Property Siteid = new Property(4, String.class, "siteid", false, "SITEID");
        public final static Property Create_time = new Property(5, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Json_url = new Property(6, String.class, "json_url", false, "JSON_URL");
        public final static Property Subdesc = new Property(7, String.class, "subdesc", false, "SUBDESC");
        public final static Property Subphoto = new Property(8, String.class, "subphoto", false, "SUBPHOTO");
    };


    public AlbumItemBeanDBDao(DaoConfig config) {
        super(config);
    }
    
    public AlbumItemBeanDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALBUM_ITEM_BEAN_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PID\" TEXT," + // 1: pid
                "\"TITLE\" TEXT," + // 2: title
                "\"COUNT\" TEXT," + // 3: count
                "\"SITEID\" TEXT," + // 4: siteid
                "\"CREATE_TIME\" TEXT," + // 5: create_time
                "\"JSON_URL\" TEXT," + // 6: json_url
                "\"SUBDESC\" TEXT," + // 7: subdesc
                "\"SUBPHOTO\" TEXT);"); // 8: subphoto
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALBUM_ITEM_BEAN_DB\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AlbumItemBeanDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pid = entity.getPid();
        if (pid != null) {
            stmt.bindString(2, pid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String count = entity.getCount();
        if (count != null) {
            stmt.bindString(4, count);
        }
 
        String siteid = entity.getSiteid();
        if (siteid != null) {
            stmt.bindString(5, siteid);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(6, create_time);
        }
 
        String json_url = entity.getJson_url();
        if (json_url != null) {
            stmt.bindString(7, json_url);
        }
 
        String subdesc = entity.getSubdesc();
        if (subdesc != null) {
            stmt.bindString(8, subdesc);
        }
 
        String subphoto = entity.getSubphoto();
        if (subphoto != null) {
            stmt.bindString(9, subphoto);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AlbumItemBeanDB readEntity(Cursor cursor, int offset) {
        AlbumItemBeanDB entity = new AlbumItemBeanDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // count
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // siteid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // create_time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // json_url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // subdesc
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // subphoto
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AlbumItemBeanDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCount(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSiteid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreate_time(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setJson_url(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSubdesc(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSubphoto(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AlbumItemBeanDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AlbumItemBeanDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
