package com.hzpd.modle.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hzpd.modle.db.NewsItemBeanForCollection;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_ITEM_BEAN_FOR_COLLECTION".
*/
public class NewsItemBeanForCollectionDao extends AbstractDao<NewsItemBeanForCollection, Long> {

    public static final String TABLENAME = "NEWS_ITEM_BEAN_FOR_COLLECTION";

    /**
     * Properties of entity NewsItemBeanForCollection.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Collectionid = new Property(1, String.class, "collectionid", false, "COLLECTIONID");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Datetime = new Property(3, String.class, "datetime", false, "DATETIME");
        public final static Property Nid = new Property(4, String.class, "nid", false, "NID");
        public final static Property Tid = new Property(5, String.class, "tid", false, "TID");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property Time = new Property(7, String.class, "time", false, "TIME");
        public final static Property Imgs = new Property(8, String.class, "imgs", false, "IMGS");
        public final static Property Json_url = new Property(9, String.class, "json_url", false, "JSON_URL");
        public final static Property Rtype = new Property(10, String.class, "rtype", false, "RTYPE");
        public final static Property Collect_time = new Property(11, String.class, "collect_time", false, "COLLECT_TIME");
        public final static Property Copyfrom = new Property(12, String.class, "copyfrom", false, "COPYFROM");
        public final static Property Fav = new Property(13, String.class, "fav", false, "FAV");
        public final static Property Comcount = new Property(14, String.class, "comcount", false, "COMCOUNT");
        public final static Property Like = new Property(15, String.class, "like", false, "LIKE");
        public final static Property Unlike = new Property(16, String.class, "unlike", false, "UNLIKE");
    };


    public NewsItemBeanForCollectionDao(DaoConfig config) {
        super(config);
    }
    
    public NewsItemBeanForCollectionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_ITEM_BEAN_FOR_COLLECTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"COLLECTIONID\" TEXT," + // 1: collectionid
                "\"TYPE\" TEXT," + // 2: type
                "\"DATETIME\" TEXT," + // 3: datetime
                "\"NID\" TEXT," + // 4: nid
                "\"TID\" TEXT," + // 5: tid
                "\"TITLE\" TEXT," + // 6: title
                "\"TIME\" TEXT," + // 7: time
                "\"IMGS\" TEXT," + // 8: imgs
                "\"JSON_URL\" TEXT," + // 9: json_url
                "\"RTYPE\" TEXT," + // 10: rtype
                "\"COLLECT_TIME\" TEXT," + // 11: collect_time
                "\"COPYFROM\" TEXT," + // 12: copyfrom
                "\"FAV\" TEXT," + // 13: fav
                "\"COMCOUNT\" TEXT," + // 14: comcount
                "\"LIKE\" TEXT," + // 15: like
                "\"UNLIKE\" TEXT);"); // 16: unlike
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_ITEM_BEAN_FOR_COLLECTION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NewsItemBeanForCollection entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String collectionid = entity.getCollectionid();
        if (collectionid != null) {
            stmt.bindString(2, collectionid);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String datetime = entity.getDatetime();
        if (datetime != null) {
            stmt.bindString(4, datetime);
        }
 
        String nid = entity.getNid();
        if (nid != null) {
            stmt.bindString(5, nid);
        }
 
        String tid = entity.getTid();
        if (tid != null) {
            stmt.bindString(6, tid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
 
        String imgs = entity.getImgs();
        if (imgs != null) {
            stmt.bindString(9, imgs);
        }
 
        String json_url = entity.getJson_url();
        if (json_url != null) {
            stmt.bindString(10, json_url);
        }
 
        String rtype = entity.getRtype();
        if (rtype != null) {
            stmt.bindString(11, rtype);
        }
 
        String collect_time = entity.getCollect_time();
        if (collect_time != null) {
            stmt.bindString(12, collect_time);
        }
 
        String copyfrom = entity.getCopyfrom();
        if (copyfrom != null) {
            stmt.bindString(13, copyfrom);
        }
 
        String fav = entity.getFav();
        if (fav != null) {
            stmt.bindString(14, fav);
        }
 
        String comcount = entity.getComcount();
        if (comcount != null) {
            stmt.bindString(15, comcount);
        }
 
        String like = entity.getLike();
        if (like != null) {
            stmt.bindString(16, like);
        }
 
        String unlike = entity.getUnlike();
        if (unlike != null) {
            stmt.bindString(17, unlike);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NewsItemBeanForCollection readEntity(Cursor cursor, int offset) {
        NewsItemBeanForCollection entity = new NewsItemBeanForCollection( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // collectionid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // datetime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // imgs
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // json_url
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // rtype
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // collect_time
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // copyfrom
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // fav
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // comcount
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // like
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // unlike
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NewsItemBeanForCollection entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCollectionid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDatetime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setImgs(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setJson_url(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRtype(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCollect_time(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCopyfrom(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFav(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setComcount(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLike(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUnlike(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(NewsItemBeanForCollection entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(NewsItemBeanForCollection entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
