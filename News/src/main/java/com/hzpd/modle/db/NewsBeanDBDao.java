package com.hzpd.modle.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hzpd.modle.db.NewsBeanDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_BEAN_DB".
*/
public class NewsBeanDBDao extends AbstractDao<NewsBeanDB, Long> {

    public static final String TABLENAME = "NEWS_BEAN_DB";

    /**
     * Properties of entity NewsBeanDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nid = new Property(1, String.class, "nid", false, "NID");
        public final static Property TagId = new Property(2, String.class, "tagId", false, "TAG_ID");
        public final static Property Authorname = new Property(3, String.class, "authorname", false, "AUTHORNAME");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Sid = new Property(5, String.class, "sid", false, "SID");
        public final static Property Tid = new Property(6, String.class, "tid", false, "TID");
        public final static Property Outline = new Property(7, String.class, "outline", false, "OUTLINE");
        public final static Property Type = new Property(8, String.class, "type", false, "TYPE");
        public final static Property Update_time = new Property(9, String.class, "update_time", false, "UPDATE_TIME");
        public final static Property Json_url = new Property(10, String.class, "json_url", false, "JSON_URL");
        public final static Property Imgs = new Property(11, String.class, "imgs", false, "IMGS");
        public final static Property Rtype = new Property(12, String.class, "rtype", false, "RTYPE");
        public final static Property Comcount = new Property(13, String.class, "comcount", false, "COMCOUNT");
        public final static Property Sort_order = new Property(14, String.class, "sort_order", false, "SORT_ORDER");
        public final static Property Subjectsort = new Property(15, String.class, "subjectsort", false, "SUBJECTSORT");
        public final static Property Status = new Property(16, String.class, "status", false, "STATUS");
        public final static Property Comflag = new Property(17, String.class, "comflag", false, "COMFLAG");
        public final static Property Isreaded = new Property(18, String.class, "isreaded", false, "ISREADED");
        public final static Property Columnid = new Property(19, String.class, "columnid", false, "COLUMNID");
        public final static Property Copyfrom = new Property(20, String.class, "copyfrom", false, "COPYFROM");
        public final static Property Fav = new Property(21, String.class, "fav", false, "FAV");
        public final static Property Attname = new Property(22, String.class, "attname", false, "ATTNAME");
        public final static Property Like = new Property(23, String.class, "like", false, "LIKE");
        public final static Property Unlike = new Property(24, String.class, "unlike", false, "UNLIKE");
    };


    public NewsBeanDBDao(DaoConfig config) {
        super(config);
    }
    
    public NewsBeanDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_BEAN_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NID\" TEXT," + // 1: nid
                "\"TAG_ID\" TEXT," + // 2: tagId
                "\"AUTHORNAME\" TEXT," + // 3: authorname
                "\"TITLE\" TEXT," + // 4: title
                "\"SID\" TEXT," + // 5: sid
                "\"TID\" TEXT," + // 6: tid
                "\"OUTLINE\" TEXT," + // 7: outline
                "\"TYPE\" TEXT," + // 8: type
                "\"UPDATE_TIME\" TEXT," + // 9: update_time
                "\"JSON_URL\" TEXT," + // 10: json_url
                "\"IMGS\" TEXT," + // 11: imgs
                "\"RTYPE\" TEXT," + // 12: rtype
                "\"COMCOUNT\" TEXT," + // 13: comcount
                "\"SORT_ORDER\" TEXT," + // 14: sort_order
                "\"SUBJECTSORT\" TEXT," + // 15: subjectsort
                "\"STATUS\" TEXT," + // 16: status
                "\"COMFLAG\" TEXT," + // 17: comflag
                "\"ISREADED\" TEXT," + // 18: isreaded
                "\"COLUMNID\" TEXT," + // 19: columnid
                "\"COPYFROM\" TEXT," + // 20: copyfrom
                "\"FAV\" TEXT," + // 21: fav
                "\"ATTNAME\" TEXT," + // 22: attname
                "\"LIKE\" TEXT," + // 23: like
                "\"UNLIKE\" TEXT);"); // 24: unlike
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_BEAN_DB\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NewsBeanDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nid = entity.getNid();
        if (nid != null) {
            stmt.bindString(2, nid);
        }
 
        String tagId = entity.getTagId();
        if (tagId != null) {
            stmt.bindString(3, tagId);
        }
 
        String authorname = entity.getAuthorname();
        if (authorname != null) {
            stmt.bindString(4, authorname);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String sid = entity.getSid();
        if (sid != null) {
            stmt.bindString(6, sid);
        }
 
        String tid = entity.getTid();
        if (tid != null) {
            stmt.bindString(7, tid);
        }
 
        String outline = entity.getOutline();
        if (outline != null) {
            stmt.bindString(8, outline);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(10, update_time);
        }
 
        String json_url = entity.getJson_url();
        if (json_url != null) {
            stmt.bindString(11, json_url);
        }
 
        String imgs = entity.getImgs();
        if (imgs != null) {
            stmt.bindString(12, imgs);
        }
 
        String rtype = entity.getRtype();
        if (rtype != null) {
            stmt.bindString(13, rtype);
        }
 
        String comcount = entity.getComcount();
        if (comcount != null) {
            stmt.bindString(14, comcount);
        }
 
        String sort_order = entity.getSort_order();
        if (sort_order != null) {
            stmt.bindString(15, sort_order);
        }
 
        String subjectsort = entity.getSubjectsort();
        if (subjectsort != null) {
            stmt.bindString(16, subjectsort);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(17, status);
        }
 
        String comflag = entity.getComflag();
        if (comflag != null) {
            stmt.bindString(18, comflag);
        }
 
        String isreaded = entity.getIsreaded();
        if (isreaded != null) {
            stmt.bindString(19, isreaded);
        }
 
        String columnid = entity.getColumnid();
        if (columnid != null) {
            stmt.bindString(20, columnid);
        }
 
        String copyfrom = entity.getCopyfrom();
        if (copyfrom != null) {
            stmt.bindString(21, copyfrom);
        }
 
        String fav = entity.getFav();
        if (fav != null) {
            stmt.bindString(22, fav);
        }
 
        String attname = entity.getAttname();
        if (attname != null) {
            stmt.bindString(23, attname);
        }
 
        String like = entity.getLike();
        if (like != null) {
            stmt.bindString(24, like);
        }
 
        String unlike = entity.getUnlike();
        if (unlike != null) {
            stmt.bindString(25, unlike);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NewsBeanDB readEntity(Cursor cursor, int offset) {
        NewsBeanDB entity = new NewsBeanDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tagId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // authorname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // outline
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // type
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // update_time
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // json_url
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // imgs
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // rtype
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // comcount
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // sort_order
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // subjectsort
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // status
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // comflag
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // isreaded
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // columnid
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // copyfrom
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // fav
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // attname
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // like
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // unlike
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NewsBeanDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTagId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthorname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOutline(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUpdate_time(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setJson_url(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setImgs(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRtype(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setComcount(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSort_order(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSubjectsort(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setStatus(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setComflag(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIsreaded(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setColumnid(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCopyfrom(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setFav(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setAttname(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setLike(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setUnlike(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(NewsBeanDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(NewsBeanDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
